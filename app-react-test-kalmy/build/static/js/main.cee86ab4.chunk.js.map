{"version":3,"sources":["components/Login.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","user","password","loading","error","onSubmit","bind","onChange","this","Username","Password","console","log","setState","fetch","method","headers","body","JSON","stringify","then","response","json","data","respuesta","parse","StatusCode","localStorage","setItem","Data","to","toast","info","Message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","finally","e","value","name","getItem","className","Segment","Form","Field","Input","placeholder","type","warning","header","list","style","display","justifyContent","Button","color","React","Component","options","key","text","Dashboard","agrupados","DataChart","columnas","generarReporte","cerrarSesion","removeItem","forceUpdate","carRents","map","carRent","obj","First","Group","forEach","carRentGroup","Second","Count","find","x","push","Math","floor","random","toString","Cantidad","token","length","a1","a2","generarDataChart","Container","width","whiteSpace","onClick","alignItems","Dropdown","multiple","selection","height","margin","top","right","left","bottom","strokeDasharray","dataKey","columna","stackId","fill","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cee86ab4.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Button, Form,Segment,Input,Message } from 'semantic-ui-react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass Login extends React.Component{\r\n    constructor(props) {\r\n        super(props);          \r\n  \r\n        this.state = {\r\n            user:'',\r\n            password:'',\r\n            loading:false,\r\n            error:false\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }   \r\n\r\n    onSubmit(){\r\n        const {user:Username,password:Password} = this.state;\r\n\r\n        if(Username && Password){\r\n            console.log(`Peticion login - usuario: ${Username} contraseña: ${Password}`);                          \r\n            this.setState({loading:true});\r\n            fetch('http://localhost:55657/api/login/authenticate',{\r\n                method:'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'                \r\n                },\r\n                body:JSON.stringify({Username,Password})\r\n            })\r\n            .then(response =>response.json())\r\n            .then(data => {\r\n                const respuesta = JSON.parse(data);\r\n                console.log(\"respuesta: \",respuesta);\r\n                if(respuesta.StatusCode === 200){\r\n                    console.log(\"Usuario autorizado\");\r\n                    localStorage.setItem('tokenjwt',respuesta.Data);\r\n                    return(\r\n                        <Redirect to=\"/\" />\r\n                    )                    \r\n                } else {\r\n                    toast.info(respuesta.Message, {\r\n                        position: \"bottom-center\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true\r\n                    });                    \r\n                }\r\n            }).finally(() => this.setState({loading:false}));  \r\n        } else {\r\n            toast.info(\"Asegurate de llenar todos los campos\", {\r\n                position: \"bottom-center\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });   \r\n            this.setState({error:true});\r\n        }\r\n              \r\n    }\r\n\r\n    onChange(e,{value,name}){\r\n        this.setState({[name]:value,error:false});\r\n    }\r\n\r\n    render(){\r\n        const {user,password,error} = this.state;\r\n\r\n        const token = localStorage.getItem('tokenjwt');\r\n        if(token){\r\n            return(\r\n                <Redirect to=\"/\" />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className='container-login'>\r\n                <Segment>\r\n                    <h2>Inicia sesión</h2>\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Form.Field>\r\n                            <label>Usuario</label>\r\n                            <Input error={error} name='user' value={user} placeholder='Usuario' onChange={this.onChange}/>                            \r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Contraseña</label>\r\n                            <Input error={error} name='password' type='password' value={password} placeholder='Contraseña' onChange={this.onChange}/>                            \r\n                        </Form.Field> \r\n                        {error ? <Message\r\n                            warning\r\n                            header='Faltan datos por llenar'\r\n                            list={[\r\n                                'Asegurate de haber llenado todos los campos para ingresar',\r\n                            ]}\r\n                            />\r\n                        :null} \r\n                        <div style={{display:'flex',justifyContent:'center'}}>\r\n                            <Button color='blue' type='submit'>Ingresar</Button>\r\n                        </div>          \r\n                        \r\n                    </Form>\r\n                </Segment>\r\n            </div>\r\n        );    \r\n    }\r\n        \r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport '../App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Button,Segment,Container,Dropdown } from 'semantic-ui-react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {\r\n    BarChart, Bar, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport {  toast } from 'react-toastify';\r\n \r\n\r\nconst options = [\r\n    { key: '1', text: 'Brand', value: 'Brand' },\r\n    { key: '2', text: 'Model', value: 'Model' },\r\n    { key: '3', text: 'Type', value: 'Type' },    \r\n  ]\r\n\r\nclass Dashboard extends React.Component{ \r\n    \r\n    constructor(props) {\r\n        super(props);          \r\n  \r\n        this.state = {\r\n            agrupados:[],\r\n            DataChart:[],\r\n            columnas:[],\r\n            loading:false\r\n        }\r\n        \r\n        this.onChange = this.onChange.bind(this);\r\n        this.generarReporte = this.generarReporte.bind(this);\r\n        this.cerrarSesion = this.cerrarSesion.bind(this);\r\n    }\r\n\r\n    cerrarSesion(){\r\n        localStorage.removeItem('tokenjwt');\r\n        \r\n        this.forceUpdate();       \r\n    }\r\n\r\n    generarDataChart(carRents){\r\n        let columnas = [];\r\n        let DataChart = carRents.map(carRent => {\r\n            let obj = {name:carRent.First};\r\n\r\n            if(carRent.Group){\r\n                carRent.Group.forEach(carRentGroup => {\r\n                    obj[carRentGroup.Second] =  carRentGroup.Count; \r\n                    if(!columnas.find(x => x.name === carRentGroup.Second))                                           \r\n                        columnas.push({name:carRentGroup.Second,color:`#${Math.floor(Math.random()*16777215).toString(16)}`});\r\n                })\r\n            } else {\r\n                obj.Cantidad = carRent.Count;\r\n                if(!columnas.find(x => x.name === \"Cantidad\"))\r\n                    columnas.push({name:\"Cantidad\",color:`#${Math.floor(Math.random()*16777215).toString(16)}`});\r\n            }\r\n\r\n            return obj;\r\n        });\r\n\r\n        this.setState({DataChart,columnas});\r\n    }\r\n\r\n    generarReporte(){\r\n        const {agrupados} = this.state;\r\n        const token = localStorage.getItem('tokenjwt');\r\n        if(agrupados.length && token)\r\n            fetch('http://localhost:55657/api/rents/getcarrents',{\r\n                method:'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization':`Bearer ${token}`               \r\n                },\r\n                body:JSON.stringify({a1:agrupados[0],a2:agrupados[1]? agrupados[1] : \"\"})\r\n            })       \r\n            .then(response =>response.json())\r\n            .then(data => {\r\n                const respuesta = JSON.parse(data);\r\n                this.generarDataChart(respuesta.Data);\r\n            });\r\n    }   \r\n\r\n    onChange(e,{value:agrupados}){\r\n        if(agrupados.length <3)\r\n            this.setState({agrupados}); \r\n        else{\r\n            toast.info(\"Solo puedes elegir dos parametros de agrupación\", {\r\n                position: \"bottom-center\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true\r\n            });   \r\n        }\r\n    }\r\n    \r\n    render(){\r\n        const {agrupados,DataChart,columnas} = this.state;\r\n        const token = localStorage.getItem('tokenjwt');\r\n        \r\n        if(!token)\r\n            return(\r\n                <Redirect to=\"/Login\" />\r\n            )   \r\n        \r\n        return (\r\n            <Container className='container-dashboard'>\r\n                <Segment className='segmento-dashboard'>\r\n                    <div style={{display:\"flex\",width:'100%'}}>\r\n                        <div style={{display:'flex'}}>\r\n                            <h3 style={{whiteSpace:'nowrap'}}>Generar gráfica de reporte de rentas de vehiculos</h3>\r\n                        </div>\r\n                        <div style={{display:'flex',justifyContent:'flex-end',width:'100%'}}>\r\n                            <Button color='red' onClick={this.cerrarSesion}>Cerrar sesión</Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div style={{display:\"flex\",justifyContent:'center',alignItems:'center'}}>\r\n                        <Dropdown value={agrupados} onChange={this.onChange} placeholder='Agrupados' multiple selection options={options} />\r\n                        <Button color='blue' onClick={this.generarReporte}>Generar gráfica</Button>\r\n                    </div>\r\n                    \r\n                        <div style={{display:\"flex\",justifyContent:'center',alignItems:'center',height:'100%'}}>\r\n                            {DataChart.length ? \r\n                                <ResponsiveContainer width={'85%'} height={\"75%\"}>\r\n                                    <BarChart                               \r\n                                        data={DataChart}\r\n                                        margin={{\r\n                                        top: 20, right: 30, left: 20, bottom: 5,\r\n                                        }}\r\n                                    >\r\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                        <XAxis dataKey=\"name\" />\r\n                                        <YAxis />\r\n                                        <Tooltip />\r\n                                        <Legend />\r\n                                        {columnas.map(columna => {\r\n                                            return(\r\n                                                <Bar key={columna.name} dataKey={columna.name} stackId=\"a\" fill={columna.color} />\r\n                                            )\r\n                                        })}                          \r\n                                    </BarChart>\r\n                                </ResponsiveContainer>\r\n                            : <h3>Aún no hay datos para mostrar</h3>}\r\n                        </div>\r\n                    \r\n                </Segment>\r\n            </Container>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,  \n} from \"react-router-dom\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\n\nfunction App() {  \n\n  return (\n    <Router>\n      <div className=\"App\">        \n          <Switch>   \n            <Route exact path=\"/\">\n              <Dashboard />\n            </Route>       \n            <Route path=\"/Login\">\n              <Login />\n            </Route>            \n          </Switch>  \n          <ToastContainer />                        \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}